<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
        				http://www.springframework.org/schema/tx 
        				http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        				http://www.springframework.org/schema/task  
						http://www.springframework.org/schema/task/spring-task-3.1.xsd"  
        				
        				>  
   
   <!--  自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器  
   <context:component-scan base-package="com.hfga.controller" /> 
	开启aop，对类代理
	<aop:config proxy-target-class="true"></aop:config>
	开启shiro注解支持
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean> 
	定义需要特殊处理的异常，用类名或完全路径名作为key，异常页名作为值。改方法可以用
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	    <property name="exceptionMappings">
	        <props>
	            <prop key="org.apache.shiro.authz.UnauthorizedException">/refuse</prop>
	        </props>
	    </property>
	</bean> 
	 StringHttpMessageConverter编码为UTF-8，防止乱码  
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
                <constructor-arg value="UTF-8"/>  
                <property name = "supportedMediaTypes">  
                    <list>  
                        <bean class="org.springframework.http.MediaType">  
                            <constructor-arg index="0" value="text"/>  
                            <constructor-arg index="1" value="plain"/>  
                            <constructor-arg index="2" value="UTF-8"/>  
                        </bean>  
                        <bean class="org.springframework.http.MediaType">  
                            <constructor-arg index="0" value="*"/>  
                            <constructor-arg index="1" value="*"/>  
                            <constructor-arg index="2" value="UTF-8"/>  
                        </bean>  
                    </list>  
                </property>  
            </bean>
    避免IE执行AJAX时，返回JSON出现下载文件  
    <bean id="mappingJacksonHttpMessageConverter"  
        class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">  
        <property name="supportedMediaTypes">  
            <list>  
                <value>text/html;charset=UTF-8</value>  
            </list>  
        </property>  
    </bean>  
    启动SpringMVC的注解功能，完成请求和注解POJO的映射  
    <bean  
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <ref bean="mappingJacksonHttpMessageConverter" /> JSON转换器  
            </list>  
        </property>  
    </bean>  
    定义跳转的文件的前后缀 ，视图模式配置  
    <bean id="viewResolver"
    	class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址  
        <property name="prefix" value="/WEB-INF/jsp/" />  
        <property name="suffix" value=".jsp" />  
    </bean>
    配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包  
    <bean id="multipartResolver"    
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
        默认编码  
        <property name="defaultEncoding" value="utf-8" />    
        文件大小最大值  
        <property name="maxUploadSize" value="10485760000" />    
        内存中的最大值  
        <property name="maxInMemorySize" value="40960" />    
    </bean>   
    
   定义统一异常处理器 
	<bean id="handlerExceptionResolver" class="com.hfga.exception.CustomExceptionResolver"></bean>
   静态资源访问
  <mvc:default-servlet-handler/>
  通过annotation-driven可以替代下边的处理器映射器和适配器
	<mvc:annotation-driven /> -->
	
	<task:annotation-driven scheduler="scheduler"/> 
	

	<task:scheduler  id="scheduler" pool-size="10" />

	
	
	 <!-- 自动扫描该包 --> 
   <context:component-scan base-package="com.hfoa" /> 
  <!--  <context:component-scan base-package="com.hfga.activiti" />  -->
	<!-- 开启aop，对类代理 -->
	<aop:config proxy-target-class="true"></aop:config>
	
	<!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常页名作为值。改方法可以用-->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	    <property name="exceptionMappings">
	        <props>
	            <prop key="org.apache.shiro.authz.UnauthorizedException">/refuse</prop>
	        </props>
	    </property>
	</bean> 
 	<!-- StringHttpMessageConverter编码为UTF-8，防止乱码 -->  
    <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">  
        <constructor-arg value="UTF-8"/>  
        <!-- <property name = "supportedMediaTypes">  
            <list>  
                <bean class="org.springframework.http.MediaType">  
                    <constructor-arg index="0" value="text"/>  
                    <constructor-arg index="1" value="plain"/>  
                    <constructor-arg index="2" value="UTF-8"/>  
                </bean>  
                <bean class="org.springframework.http.MediaType">  
                    <constructor-arg index="0" value="*"/>  
                    <constructor-arg index="1" value="*"/>  
                    <constructor-arg index="2" value="UTF-8"/>  
                </bean>  
            </list>  
        </property>   -->
    </bean>
    <context:property-placeholder location="classpath*:log4j.properties"  ignore-unresolvable="true" />
    <!-- 当使用@ResponseBody返回的字符串带有中文时，返回类型为String会被StringHttpMessageConverter处理.
    	当时查看源码发现默认的Charset DEFAULT_CHARSET使用的是ISO-8859-1 -->
    <mvc:annotation-driven>
        <mvc:message-converters>
           <ref bean="stringHttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven> 
    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->  
    <bean id="mappingJacksonHttpMessageConverter"  
        class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">  
        <property name="supportedMediaTypes">  
            <list>  
                <value>text/html;charset=UTF-8</value>
                <value>text/json;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>  
            </list>  
        </property>  
    </bean>
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->  
    <bean  
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->  
            </list>  
        </property>  
    </bean>  
    <!-- 定义跳转的文件的前后缀 ，视图模式配置-->  
    <bean id="viewResolver"
    	class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->  
        <property name="prefix" value="/WEB-INF/jsp/" />  
        <property name="suffix" value=".jsp" />  
    </bean>
    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->  
    <bean id="multipartResolver"    
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
        <!-- 默认编码 -->  
        <property name="defaultEncoding" value="utf-8" />    
        <!-- 文件大小最大值 -->  
        <property name="maxUploadSize" value="10485760000" />    
        <!-- 内存中的最大值 -->  
        <property name="maxInMemorySize" value="40960" />    
    </bean>  
    
	
     <bean id="jdbcTemplate"  
		    class="org.springframework.jdbc.core.JdbcTemplate">  
		    <property name="dataSource" ref="dataSourceOne"></property>  
		</bean> 
		
<context:property-placeholder location="classpath*:jdbc.properties"/> 
   <!-- 定义统一异常处理器 
	<bean id="handlerExceptionResolver" class="com.hfga.exception.CustomExceptionResolver"></bean>
    --><!-- 静态资源访问 -->
  <mvc:default-servlet-handler/>
 

</beans>  